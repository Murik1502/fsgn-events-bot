import datetime
import os.path

from cache.participants import participants
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto

from bot import bot
from aiogram.filters import Command
from aiogram import Router
from aiogram.fsm.context import FSMContext

from .new_event import mailing
from ..utils.statesform import *
from ..handlers.registration import *
from core.database import *

router = Router()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(Command("start"))
async def start_handler(message, state: FSMContext):
    await state.clear()
    cmd = message.text.split()
    if len(cmd) == 2:
        try:
            parts = cmd[1].split("-")
            cmd_dict = {}
            for i in range(0, len(parts), 2):
                cmd_dict[parts[i]] = parts[i + 1]
            event_id = cmd_dict.get('event')
            team_code = cmd_dict.get('team')

            event_info = event.Event.fetch(event_id)
            if event_info.date.date() < datetime.date.today():
                raise exceptions.EventOutOfDate
            if team_code:
                team_info = team.Team.fetch_by_code(team_code)
                await state.update_data(team_info=team_info)
                if team_info.event.id != event_info.id:
                    raise exceptions.TeamAnotherEvent

            try:
                user_info = user.User.fetch_by_tg_id(message.from_user.id)
                try:
                    if team_code and event_info.type == eventtype.EventType.TEAM:

                        participants.addParticipant(user_id=message.from_user.id, event_id=event_id)

                        join_info = user.User.join(user_info, event_id, team_code=team_code,
                                                   telegram_tag=message.from_user.username)
                        await bot.send_message(chat_id=team_info.leader.telegram_id,
                                               text=f"""@{message.from_user.username} —Ç–µ–ø–µ—Ä—å –≤ –í–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ "{event_info.name}"! """)
                        await message.answer(
                            text=f"""{team_info.leader.first_name} –ø—Ä–∏–≥–ª–∞—Å–∏–ª(–∞) –í–∞—Å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "{event_info.name}"!\n""")
                    elif event_info.type == eventtype.EventType.TEAM:

                        participants.addParticipant(user_id=message.from_user.id, event_id=event_id)

                        created_team_info = user.User.create_team(user_info, event_id, message.from_user.username)
                        await message.answer(text=f""" –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é "{event_info.name}"!\n"""
                                                  f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: https://t.me/fsgn_events_bot?start=event-{event_info.id}-team-{created_team_info[0].code}")
                    else:
                        user.User.join(user_info, event_id, telegram_tag=message.from_user.username)
                        await message.answer(text=f""" –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é "{event_info.name}"!\n""")
                        participants.addParticipant(user_id=message.from_user.id, event_id=event_id)

                except exceptions.UserAlreadyJoined:
                    await message.answer(text=f""" –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é "{event_info.name}"  """)

            except exceptions.UserNotFound:
                await state.update_data(event_id=event_id, team_code=team_code, event_info=event_info, message=message, start_func=start_handler)
                await reg(message=message, state=state)

        except (IndexError, exceptions.EventNotFound, exceptions.TeamNotFound, exceptions.TeamAnotherEvent):
            await message.answer(text="–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
        except exceptions.EventOutOfDate:
            await message.answer(text=f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å (")

    else:
        try:
            user_info = user.User.fetch_by_tg_id(message.from_user.id)
            try:
                all_events = InlineKeyboardMarkup(inline_keyboard=[])
                for e in event.Event.fetch_all():
                    if e.date.date() >= datetime.date.today():
                        all_events.inline_keyboard.append(
                            [InlineKeyboardButton(text=f"{e.name}(–ø—Ä–æ–π–¥–µ—Ç {e.date.day}.{e.date.month}.{e.date.year})",
                                                  callback_data=f"more info {e.id}")])
                if len(all_events.inline_keyboard) == 0:
                    raise exceptions.EventNotFound
                await message.answer_photo(
                    photo=FSInputFile(os.path.join(os.getcwd(), "core/static/welcome_image.jpg")),
                    caption="üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!\n\n üéä –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —É–∑–Ω–∞—Ç—å –Ω–æ–≤–æ–µ, –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –∏ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è! \n\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\nüîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å\nüîπ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!",
                    reply_markup=all_events)
            except exceptions.EventNotFound:
                await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (")
        except exceptions.UserNotFound:
            await state.update_data(message=message, start_func=start_handler)
            await reg(message, state)


@router.callback_query(F.data.contains("more info"))
async def more_info(call: CallbackQuery):
    event_id = call.data.split()[2]
    data = event.Event.fetch(int(event_id))
    join_event = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å", url=f'https://t.me/fsgn_events_bot?start=event-{data.id}'), ],
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='go back'), ]
    ], )
    try:
        await call.message.edit_media(media=InputMediaPhoto(media=data.photo_id,
                                                            caption=f"{data.description}"),
                                      reply_markup=join_event)
    except:
        await call.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


@router.callback_query(F.data.contains("go back"))
async def go_back(call: CallbackQuery):
    try:
        all_events = InlineKeyboardMarkup(inline_keyboard=[])
        events = event.Event.fetch_all()
        for e in events:
            if e.date.date() >= datetime.date.today():
                all_events.inline_keyboard.append(
                    [InlineKeyboardButton(text=f"{e.name}(–ø—Ä–æ–π–¥–µ—Ç {e.date.day}.{e.date.month}.{e.date.year})",
                                          callback_data=f"more info {e.id}")])
        if len(all_events.inline_keyboard) == 0:
            raise exceptions.EventNotFound
        photo = InputMediaPhoto(media=FSInputFile(os.path.join(os.getcwd(), "core/static/welcome_image.jpg")),
                                caption="üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!\n\nüéä –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —É–∑–Ω–∞—Ç—å –Ω–æ–≤–æ–µ, –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –∏ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è! \n\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\nüîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å\nüîπ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!"
                                )
        await call.message.edit_media(media=photo,
                                      reply_markup=all_events)
    except exceptions.EventNotFound:
        await call.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (")
