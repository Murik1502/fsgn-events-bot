from aiogram.filters import Command, StateFilter
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from bot import bot

from cache.apsched import scheduler
from cache.apsched import mailing
from cache.participants import participants

from google_sheet.sheet_editor import Sheet
from ..database import user, eventtype, role, event, participant
from ..database.visit import Visit
from ..utils.statesform import *
from ..keyboards.inline import event_type, event_status
import datetime

admin_router = Router()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /new_event
@admin_router.message(Command('new_event'))
async def new_event(message, state: FSMContext):
    user_info = user.User.fetch_by_tg_id(message.from_user.id)
    if user_info.role != role.Role.ADMIN:
        return
    await state.set_state(CreateEvent.step_image)
    await state.update_data(id=1)
    await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ñ–∏—à—É –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.message(StateFilter(CreateEvent.step_image))
async def register_handler(message, state: FSMContext):
    await state.update_data(image=message.photo[-1].file_id)
    print(message.photo[-1].file_id)
    await state.set_state(CreateEvent.step_name)
    await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.message(StateFilter(CreateEvent.step_name))
async def register_handler(message, state: FSMContext):
    if not message.photo:
        await state.update_data(name=message.text)
        await state.set_state(CreateEvent.step2_description)
        await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.message(StateFilter(CreateEvent.step2_description))
async def register_handler(message, state: FSMContext):
    if not message.photo:
        await state.update_data(description=message.text)
        await state.set_state(CreateEvent.step_type)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', reply_markup=event_type)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–∏–ø –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data == 'individual')
async def type_handler(call: CallbackQuery, state: FSMContext):
    await state.update_data(type=call.data)
    await state.set_state(CreateEvent.step_datetime)
    await call.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º —É—á–∞—Å—Ç–∏–µ–º", reply_markup=None)
    await call.message.answer(
        f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (15.06.24 12:30)')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–∏–ø –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data == 'team')
async def type_handler(call: CallbackQuery, state: FSMContext):
    await state.update_data(type=call.data)
    await state.set_state(CreateEvent.step_datetime)
    await call.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=None)
    await call.message.answer(
        f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (15.06.24 12:30)')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.message(StateFilter(CreateEvent.step_datetime))
async def register_handler(message, state: FSMContext):
    data = await state.get_data()
    if not message.photo:
        try:
            await state.update_data(date=datetime.datetime.strptime(message.text, "%d.%m.%y %H:%M"))
        except ValueError:
            await message.answer(
                f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (15.06.24 12:30)')
        else:
            if datetime.datetime.now() > datetime.datetime.strptime(message.text, "%d.%m.%y %H:%M"):
                await message.answer(
                    "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è!")
            else:
                data = await state.get_data()
                type = "–∫–æ–º–∞–Ω–¥–Ω–æ–µ"
                if data['type'] != 'team': type = '–æ–¥–∏–Ω–æ—á–Ω–æ–µ'
                await message.answer_photo(data['image'],
                                           caption=f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\nüîπ–ù–∞–∑–≤–∞–Ω–∏–µ:\n{data['name']}\n\nüîπ–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:\n{data['date']}\n\nüîπ–û–ø–∏—Å–∞–Ω–∏–µ:\n{data['description']}\n\nüîπ–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {type}",
                                           reply_markup=event_status)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data == 'add event')
async def type_handler(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    date_event = data['date']
    type_event = eventtype.EventType.DEFAULT
    user_info = user.User.fetch_by_tg_id(call.from_user.id)
    type = "–∫–æ–º–∞–Ω–¥–Ω–æ–µ"
    if data['type'] != 'team': type = '–æ–¥–∏–Ω–æ—á–Ω–æ–µ'
    await call.message.edit_caption(
        caption=f"üîπ–ù–∞–∑–≤–∞–Ω–∏–µ:\n{data['name']}\n\nüîπ–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:\n{data['date']}\n\nüîπ–û–ø–∏—Å–∞–Ω–∏–µ:\n{data['description']}\n\nüîπ–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {type}",
        reply_markup=None)
    msg = await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    if data['type'] == 'team':
        sheet = Sheet(data['name'], team=True)
        link = sheet.createSheet(['telegram_id', 'telegram_tag', '–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–ö–æ–º–∞–Ω–¥–∞', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ'],
                                 [['', '', '', '', '', '']])
    else:
        sheet = Sheet(data['name'], team=False)
        link = sheet.createSheet(['telegram_id', 'telegram_tag', '–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ'],
                                 [['', '', '', '', '']])
    if data['type'] == 'team':
        type_event = eventtype.EventType.TEAM
    event_info = user.User.create_event(
        photo_id=data['image'],
        google_sheet=link,
        description=data['description'],
        type=type_event,
        date=date_event,
        name=data['name'],
        self=user_info
    )

    time_step = datetime.timedelta(days=1)
    participants.addEvent(event_id=event_info.id)
    await scheduler.add_pending(bot=bot, func=mailing, date=date_event - time_step,
                                event_id=event_info.id)

    await msg.edit_text('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç—è–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.\n–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:\n'
                        f'`https://t.me/fsgn_events_bot?start=event-{event_info.id}`\n'
                        f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—É:\n'
                        f'{link}', parse_mode="MARKDOWN")


@admin_router.callback_query(F.data.startswith('yes_visit'))
async def type_handler(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ')
    event_id = call.data[9:]
    for partic in user.User.fetch_by_tg_id(call.from_user.id).participation():
        if partic.event.id == int(event_id):
            participants.addParticipant(call.from_user.id, event_id)
            partic.visit = Visit.YES
            return


@admin_router.callback_query(F.data.startswith('no_visit'))
async def type_handler(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ')
    event_id = call.data[8:]
    for partic in user.User.fetch_by_tg_id(call.from_user.id).participation():
        if partic.event.id == int(event_id):
            participants.addParticipant(call.from_user.id, event_id)
            partic.visit = Visit.NO
            return


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data == 'create again')
async def type_handler(call: CallbackQuery, state: FSMContext):
    await call.message.edit_caption(caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞–Ω–æ–≤–æ', reply_markup=None)
    await state.set_state(CreateEvent.step_image)
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ñ–∏—à—É –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
